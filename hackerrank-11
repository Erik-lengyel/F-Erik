use std::io::{self, BufRead};

/*
 * Завершіть функцію 'countApplesAndOranges' нижче.
 *
 * Функція приймає наступні параметри:
 *  1. Ціле число s= початкова точка місцезнаходження будинку Сема
 *  2. Ціле число t= кінцева точка місцезнаходження будинку Сема
 *  3. Ціле число a= місцезнаходження яблуневого дерева
 *  4. Ціле число b= місцезнаходження апельсинового дерева
 *  5. Массив цілих чисел apples = відстані  на які падають яблука від яблуневого дерева
 *  6. Массив цілих чисел oranges = відстані  на які падають апельсини від апельсинового дерева
 */

fn countApplesAndOranges(s: i32, t: i32, a: i32, b: i32, apples: &[i32], oranges: &[i32]) {
    // Підраховуємо кількість яблук, що впали на будинок
    let apples_on_house = apples
        .iter()
        .filter(|&&d| a + d >= s && a + d <= t)
        .count();
    
    // Підраховуємо кількість апельсинів, що впали на будинок
    let oranges_on_house = oranges
        .iter()
        .filter(|&&d| b + d >= s && b + d <= t)
        .count();
    
    // Виводимо результати
    println!("{}", apples_on_house);
    println!("{}", oranges_on_house);
}

fn main() {
    let stdin = io::stdin();
    let mut stdin_iterator = stdin.lock().lines();

    let first_multiple_input: Vec<String> = stdin_iterator.next().unwrap().unwrap()
        .split(' ')
        .map(|s| s.to_string())
        .collect();

    let s = first_multiple_input[0].trim().parse::<i32>().unwrap();
    let t = first_multiple_input[1].trim().parse::<i32>().unwrap();

    let second_multiple_input: Vec<String> = stdin_iterator.next().unwrap().unwrap()
        .split(' ')
        .map(|s| s.to_string())
        .collect();

    let a = second_multiple_input[0].trim().parse::<i32>().unwrap();
    let b = second_multiple_input[1].trim().parse::<i32>().unwrap();

    let third_multiple_input: Vec<String> = stdin_iterator.next().unwrap().unwrap()
        .split(' ')
        .map(|s| s.to_string())
        .collect();

    let m = third_multiple_input[0].trim().parse::<i32>().unwrap();
    let n = third_multiple_input[1].trim().parse::<i32>().unwrap();

    let apples: Vec<i32> = stdin_iterator.next().unwrap().unwrap()
        .trim_end()
        .split(' ')
        .map(|s| s.to_string().parse::<i32>().unwrap())
        .collect();

    let oranges: Vec<i32> = stdin_iterator.next().unwrap().unwrap()
        .trim_end()
        .split(' ')
        .map(|s| s.to_string().parse::<i32>().unwrap())
        .collect();

    countApplesAndOranges(s, t, a, b, &apples, &oranges);
}
